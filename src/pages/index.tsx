import { type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import React, { useState } from "react";
import Docs from "src/components/docs";

import { api } from "src/utils/api";

const roundsAvailable = {
  0: "Albert Park Grand Prix Circuit",
  24: "Shanghai International Circuit",
  4: "Bahrain International Circuit",
  9: "Circuit de Barcelona-Catalunya",
  10: "Circuit de Monaco",
  18: "Istanbul Park",
  25: "Silverstone Circuit",
  21: "N√ºrburgring",
  16: "Hungaroring",
  28: "Valencia Street Circuit",
  12: "Circuit de Spa-Francorchamps",
  1: "Autodromo Nazionale di Monza",
  20: "Marina Bay Street Circuit",
  27: "Suzuka Circuit",
  3: "Aut√≥dromo Jos√© Carlos Pace",
  29: "Yas Marina Circuit",
  7: "Circuit Gilles Villeneuve",
  11: "Circuit de Nevers Magny-Cours",
  15: "Hockenheimring",
  14: "Fuji Speedway",
  17: "Indianapolis Motor Speedway",
  19: "Korean International Circuit",
  26: "Sochi Autodrom",
  5: "Baku City Circuit",
  22: "Red Bull Ring",
  13: "Circuit of the Americas",
  2: "Aut√≥dromo Hermanos Rodr√≠guez",
  8: "Circuit Paul Ricard",
  6: "Buddh International Circuit",
};

const roundsCurrent = [
  "Bahrain International Circuit",
  "Jeddah International Circuit",
  "Albert Park Grand Prix Circuit",
  "Baku City Circuit",
  "Miami International Autodrome",
  "Autodromo Enze E Dino Ferrari",
  "Circuit de Monaco",
  "Circuit de Barcelona-Catalunya",
  "Circuit Gilles Villeneuve",
  "Red Bull Ring",
  "Silverstone Circuit",
  "Hungaroring",
  "Circuit de Spa-Francorchamps",
  "Circuit Zandvoort",
  "Autodromo Nazionale di Monza",
  "Marina Bay Street Circuit",
  "Suzuka Circuit",
  "Lusail International Circuit",
  "Circuit of the Americas",
  "Aut√≥dromo Hermanos Rodr√≠guez",
  "Aut√≥dromo Jos√© Carlos Pace",
  "Las Vegas Street Circuit",
  "Yas Marina Circuit",
];

const drivers = [
  "Valtteri Bottas",
  "Lance Stroll",
  "George Russell",
  "Fernando Alonso",
  "Lewis Hamilton",
  "Sergio P√©rez",
  "Kevin Magnussen",
  "Carlos Sainz",
  "Lando Norris",
  "Charles Leclerc",
  "Max Verstappen",
  "Pierre Gasly",
  "Alexander Albon",
  "Carlos Sainz Jr.",
  "Yuki Tsunoda",
  "Oscar Piastri",
  "Esteban Ocon",
  "Logan Sargeant",
  "Zhou Guanyu",
  "Nico H√ºlkenberg",
  "Nyck de Vries",
];

const Home: NextPage = () => {
  const [round, setRound] = useState(0);
  const [driver, setDriver] = useState(0);
  const [quali, setQuali] = useState(0);

  // make a request to the API
  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    console.log("I m wokring!Q")

    let myHeaders = new Headers();
    myHeaders.append("Content-Type", "application/json");
    myHeaders.append("Access-Control-Allow-Origin", "http://localhost:3001");

    let circuit = roundsCurrent[round];

    if (round == 1) {
      circuit = roundsAvailable[7];
    } else if (round == 4) {
      circuit = roundsAvailable[7];
    } else if (round == 21) {
      circuit = roundsAvailable[5];
    } else if (round == 17) {
      circuit = roundsAvailable[4];
    } else if (round == 5) {
      circuit = roundsAvailable[27];
    }

    let raw = JSON.stringify({
      name: drivers[driver],
      round: circuit,
      qualifying_pos: quali.toString(),
    });

    // let requestOptions = {
    //   method: "POST",
    //   headers: myHeaders,
    //   body: raw,
    //   mode: "no-cors",
    // };

    await fetch("https://f1-predictor.onrender.com/predictGrid", {
      method: "POST",
      headers: myHeaders,
      body: raw,
    })
      .then((response) => response.json())
      .then((result) => console.log(result))
      .catch((error) => console.log("error", error));
  };
  // const response = await fetch(
  //   `http://localhost:3000/api/predict?round=${round}&driver=${driver}`
  // );

  return (
    <>
      <Head>
        <title>F1 Race Predictor</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex flex-col md:flex-row min-h-screen font-inter">
        <section className="md:fixed md:overflow-auto md:left-0 md:overflow-y-auto md:h-full bg-[#161616] px-16 py-12 md:w-1/2 xl:w-1/3 bg-[url('/red-bg.jpg')] bg-cover text-white">
          <div className="flex flex-col justify-center gap-4">
            <Image
                src={"/f1-dark.png"}
                width={100}
                height={100}
                alt={"Formula One Logo"}
            />
            <h1 className="text-4xl font-semibold m-0">Result Predictor</h1>
            <h2 className="text-xl opacity-60 m-0">Based on the Qualifying Position</h2>
          </div>
          <form
              className="my-10 flex w-full max-w-md flex-col gap-4 rounded-lg border-[1px] border-stone-800 bg-[#E6002B]/30 backdrop-blur-2xl p-8"
              onSubmit={handleSubmit}
          >
            <label className="flex flex-col gap-2 text-sm">
              Year:
              <input
                  className="rounded-lg border-[1px] border-stone-700 bg-stone-900 px-2 py-2 text-white outline-white"
                  type="number"
                  disabled
                  value={2023}
              />
            </label>
            <label className="flex flex-col gap-2 text-sm">
              Circuit:
              <select
                  className="rounded-lg border-[1px] border-stone-700 bg-stone-900 px-2 py-2 text-white outline-white"
                  onChange={(e) => setRound(Number(e.target.value))}
              >
                {Object.entries(roundsCurrent).map(([key, value]) => (
                    <option key={key} value={key}>
                      {value}
                    </option>
                ))}
              </select>
            </label>
            <label className="flex flex-col gap-2 text-sm">
              Driver:
              <select
                  className="rounded-lg border-[1px] border-stone-700 bg-stone-900 px-2 py-2 text-white outline-white"
                  onChange={(e) => setDriver(Number(e.target.value))}
              >
                {Object.entries(drivers).map(([key, value]) => (
                    <option key={key} value={key}>
                      {value}
                    </option>
                ))}
              </select>
            </label>
            <label className="flex flex-col gap-2 text-sm">
              Qualifying Position:
              <input
                  className="rounded-lg border-[1px] border-stone-700 bg-stone-900 px-2 py-2 text-white outline-white"
                  type="number"
                  onChange={(e) => setQuali(Number(e.target.value))}
              />
            </label>
            <button
                className="rounded-lg bg-white p-2 text-sm font-medium text-black transition-all ease-in-out hover:shadow-2xl disabled:bg-orange-900"
                type="submit"
            >
              ü™Ñ Predict
            </button>
          </form>
          <section className="my-10 flex w-full max-w-md flex-col gap-4 rounded-lg border-[1px] border-stone-800 bg-[#111111] p-8">
            <h2 className="text-xl font-medium m-0">Prediction:</h2>
            <section className="flex w-full max-w-md flex-col gap-4 rounded-lg border-[1px] border-stone-500 bg-[#161616] p-8">
              <p className="text-center font-medium text-2xl"> üèÖPoints Finish! </p>
            </section>
          </section>
        </section>
        <section className="p-16 md:py-24 md:px-16 xl:px-28 md:w-1/2 xl:w-2/3 md:overflow-y-auto md:fixed md:right-0 md:h-full">
          <article id="871047b8-2997-4a68-9c0f-53ade839e37d" className="page sans">
          <Docs />
          </article>
        </section>
      </main>
    </>
  );
};

export default Home;
