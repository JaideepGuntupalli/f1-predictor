import { type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useState } from "react";

import { api } from "src/utils/api";

const roundsAvailable = {
  0: "Albert Park Grand Prix Circuit",
  24: "Shanghai International Circuit",
  4: "Bahrain International Circuit",
  9: "Circuit de Barcelona-Catalunya",
  10: "Circuit de Monaco",
  18: "Istanbul Park",
  25: "Silverstone Circuit",
  21: "Nürburgring",
  16: "Hungaroring",
  28: "Valencia Street Circuit",
  12: "Circuit de Spa-Francorchamps",
  1: "Autodromo Nazionale di Monza",
  20: "Marina Bay Street Circuit",
  27: "Suzuka Circuit",
  3: "Autódromo José Carlos Pace",
  29: "Yas Marina Circuit",
  7: "Circuit Gilles Villeneuve",
  11: "Circuit de Nevers Magny-Cours",
  15: "Hockenheimring",
  14: "Fuji Speedway",
  17: "Indianapolis Motor Speedway",
  19: "Korean International Circuit",
  26: "Sochi Autodrom",
  5: "Baku City Circuit",
  22: "Red Bull Ring",
  13: "Circuit of the Americas",
  2: "Autódromo Hermanos Rodríguez",
  8: "Circuit Paul Ricard",
  6: "Buddh International Circuit",
};

const roundsCurrent = [
  "Bahrain International Circuit",
  "Jeddah International Circuit",
  "Albert Park Grand Prix Circuit",
  "Baku City Circuit",
  "Miami International Autodrome",
  "Autodromo Enze E Dino Ferrari",
  "Circuit de Monaco",
  "Circuit de Barcelona-Catalunya",
  "Circuit Gilles Villeneuve",
  "Red Bull Ring",
  "Silverstone Circuit",
  "Hungaroring",
  "Circuit de Spa-Francorchamps",
  "Circuit Zandvoort",
  "Autodromo Nazionale di Monza",
  "Marina Bay Street Circuit",
  "Suzuka Circuit",
  "Lusail International Circuit",
  "Circuit of the Americas",
  "Autódromo Hermanos Rodríguez",
  "Autódromo José Carlos Pace",
  "Las Vegas Street Circuit",
  "Yas Marina Circuit",
];

const drivers = [
  "Valtteri Bottas",
  "Lance Stroll",
  "George Russell",
  "Fernando Alonso",
  "Lewis Hamilton",
  "Sergio Pérez",
  "Kevin Magnussen",
  "Carlos Sainz",
  "Lando Norris",
  "Charles Leclerc",
  "Max Verstappen",
  "Pierre Gasly",
  "Alexander Albon",
  "Carlos Sainz Jr.",
  "Yuki Tsunoda",
  "Oscar Piastri",
  "Esteban Ocon",
  "Logan Sargeant",
  "Zhou Guanyu",
  "Nico Hülkenberg",
  "Nyck de Vries",
];

const Home: NextPage = () => {
  const [round, setRound] = useState(0);
  const [driver, setDriver] = useState(0);
  const [quali, setQuali] = useState(0);

  // make a request to the API
  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    let myHeaders = new Headers();
    myHeaders.append("ngrok-skip-browser-warning", "1");
    myHeaders.append("Content-Type", "application/json");

    let circuit = roundsCurrent[round];

    if (round == 1) {
      circuit = roundsAvailable[7];
    } else if (round == 4) {
      circuit = roundsAvailable[7];
    } else if (round == 21) {
      circuit = roundsAvailable[5];
    } else if (round == 17) {
      circuit = roundsAvailable[4];
    } else if (round == 5) {
      circuit = roundsAvailable[27];
    }

    let raw = JSON.stringify({
      name: drivers[driver],
      round: circuit,
      qualifying_pos: quali.toString(),
    });

    // let requestOptions = {
    //   method: "POST",
    //   headers: myHeaders,
    //   body: raw,
    //   mode: "no-cors",
    // };

    await fetch("https://f44c-103-25-231-102.ngrok-free.app/predictDriverPos", {
      method: "POST",
      headers: myHeaders,
      body: raw,
    })
      .then((response) => response.json())
      .then((result) => console.log(result))
      .catch((error) => console.log("error", error));
  };
  // const response = await fetch(
  //   `http://localhost:3000/api/predict?round=${round}&driver=${driver}`
  // );

  return (
    <>
      <Head>
        <title>F1 Race Predictor</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen bg-black font-space text-white">
        <section className="fixed h-screen bg-[#161616] px-4 py-6">
          <Image
            src={"/f1-dark.png"}
            width={75}
            height={75}
            alt={"Formula One Logo"}
          />
        </section>
        <section className="w-full py-7 pl-32">
          <h1 className="text-3xl">Final Position Predictor</h1>
          <form
            className="my-10 flex w-full max-w-sm flex-col gap-4 rounded-lg border-[1px] border-stone-800 bg-[#111111] p-4"
            onSubmit={handleSubmit}
          >
            <label className="flex flex-col gap-2 text-sm">
              Year:
              <input
                className="rounded-lg border-[1px] border-stone-700 bg-stone-900 px-2 py-2 text-white outline-white"
                type="number"
                disabled
                value={2023}
              />
            </label>
            <label className="flex flex-col gap-2 text-sm">
              Circuit:
              <select
                className="rounded-lg border-[1px] border-stone-700 bg-stone-900 px-2 py-2 text-white outline-white"
                onChange={(e) => setRound(Number(e.target.value))}
              >
                {Object.entries(roundsCurrent).map(([key, value]) => (
                  <option key={key} value={key}>
                    {value}
                  </option>
                ))}
              </select>
            </label>
            <label className="flex flex-col gap-2 text-sm">
              Driver:
              <select
                className="rounded-lg border-[1px] border-stone-700 bg-stone-900 px-2 py-2 text-white outline-white"
                onChange={(e) => setDriver(Number(e.target.value))}
              >
                {Object.entries(drivers).map(([key, value]) => (
                  <option key={key} value={key}>
                    {value}
                  </option>
                ))}
              </select>
            </label>
            <label className="flex flex-col gap-2 text-sm">
              Quali Position:
              <input
                className="rounded-lg border-[1px] border-stone-700 bg-stone-900 px-2 py-2 text-white outline-white"
                type="number"
                onChange={(e) => setQuali(Number(e.target.value))}
              />
            </label>
            <button
              className="rounded-lg bg-white p-2 text-sm font-medium text-black transition-all ease-in-out hover:shadow-2xl disabled:bg-orange-900"
              type="submit"
            >
              Predict
            </button>
          </form>
        </section>
      </main>
    </>
  );
};

export default Home;
